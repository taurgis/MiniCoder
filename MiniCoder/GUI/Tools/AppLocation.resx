<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        IUJDRAAAAAAAAAAAAAAeOxUMRUYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvJTAbMSIyMzM0
        NRo2Nzg5OgAAAAAAAAAAAAAAJBQMOzwHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjJCUm
        JygoIykqKywAAAAAAAAAAAAAAAAAAAYQLS0uCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGECEhIgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfERQaFxwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRgaGhQeBAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRgXGhscDgAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhQXGBEKAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEggUFQ0KAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgsTCAoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADg8QEQ4AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgsMDQoAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwgJCgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAUG
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AQIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////+H/////////wH////////8UD////////wC
        B///////+AAB///////4AAB///////AfAD//////8D/+P//////gf////////+B/////////wP//////
        ///A/////////8H/////////wf/////////B/////////gA////////4AA///////+AAA///////wAAB
        //////+AGAD//////4H/gH/////+B//gP/////wP//Af////+D///A/////4P/+cD/////BwIgIH/8//
        8EAIAAf/z//gg+n0A//H/+Av6/gD/8f/4F/r+gP/w//gX+v9A//j/+Cf6/0D/+H/4J/r/QP/4f/gn+v9
        A//g/+Cf6/0B/+D/4J/r/QH/8H/gT+n6Af/wf+AnyPIA//A/wAAQBAB/8AAASCAIAD/4AAAwHgYAH/gA
        AB///AgP+AAAH//8HA/8AAwH//A8B/8APgP/4D4H////ABwA/gP///+AAAH+A////8AAA/8D////8AAH
        /wP////8AD//A/////////8D/////////gP////////+A/////////wH////////+B/////////wP///
        /////+D/////////wf////////+D/////////w/////////+P/////////x/////////////
</value>
  </data>
</root>